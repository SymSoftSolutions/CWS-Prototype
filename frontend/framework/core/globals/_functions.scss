//
// Functions
// =============================================================================

//
// Variables
// ---------

// Base Size
$base-unit: 8 !default;


//
// unitSize
// --------
// Use this function to set sizes with proportions.
//
// @access public
//
// @param {String} $multiplier - times the base unit ($base-unit by default)
// @param {Number} $offset - A value in pixels which will be added to the
//                  result, can be positive for addition or negative for
//                  subtraction
//
// @return {Number} Value in px, equal to the number of times the base unit
//                  plus the offset
//

@function unitSize($multiplier, $offset: 0) {
  @return ($base-unit * $multiplier + $offset) + px;
}


//
// pxToEm
// ------
// Converts a Px value into a Em value
//
// @access public
//
// @param {Number} $px - value in pixels
// @param {Number} $base - Base font size
//
// @return {Number} Value in Ems
//

@function pxToEm($px, $base: $font-base-size) {
  @return ($px / $base) + em;
}


//
// pxToRem
// ------
// Converts a Px value into a Rem value
//
// @access public
//
// @param {Number} $px - value in pixels
//
// @return {Number} Value in Rems
//

@function pxToRem($px) {
  @return ($px / $font-base-size) + rem;
}


//
// getColor
// --------
// Easily retrieve colors for use.
//
// @access public
//
// @param {String} $color - Name of the color
// @param {Color}  $value - The color value to grab (default is "base")
//
// @return {Color} Value of the color
//

@function getColor($color, $value: "base") {
  @return map-get(map-get($colors, $color), $value);
}

/// jQuery-style extend function
/// About `map-merge()`:
/// * only takes 2 arguments
/// * is not recursive
/// @param {Map} $object - first map
/// @param {ArgList} $objects - other maps
/// @param {Bool} $deep - recursive mode
/// @return {Map}
@function extend($object, $objects.../*, $deep */) {
  $last: nth($objects, -1);
  $deep: $last == true;
  $max: if($deep, length($objects) - 1, length($objects));

  // Loop through all maps in $objects...
  @for $i from 1 through $max {
    // Store current map
    $current: nth($objects, $i);

    // If not in deep mode, simply merge current map with object
    @if not $deep {
      $object: map-merge($object, $current);
    }

      // If in deep mode
    @else {
      // Loop through all tuples in current map
      @each $key, $value in $current {
        // If value is a nested map and same key from object is a nested map as well
        @if type-of($value) == "map" and type-of(map-get($object, $key)) == "map" {
          // Recursive extend
          $value: extend(map-get($object, $key), $value, true);
        }
        // Merge current tuple with object
        $object: map-merge($object, ($key: $value));
      }
    }
  }

  @return $object;
}



